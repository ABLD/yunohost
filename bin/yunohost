#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os

# Either we are in a development environment or not
IN_DEVEL = False

# Either cache has to be used inside the moulinette or not
USE_CACHE = True

# Output result in another format. Possible values are:
# - json: return a JSON encoded string
# - plain: return a script-readable output
OUTPUT_AS = None

# Level for which loggers will log
LOGGERS_LEVEL = 'INFO'
TTY_LOG_LEVEL = 'SUCCESS'

# Handlers that will be used by loggers
#  - file: log to the file LOG_DIR/LOG_FILE
#  - tty: log to current tty
LOGGERS_HANDLERS = ['file', 'tty']

# Directory and file to be used by logging
LOG_DIR = '/var/log/yunohost'
LOG_FILE = 'yunohost-cli.log'

# Check and load - as needed - development environment
if not __file__.startswith('/usr/'):
    IN_DEVEL = True
if IN_DEVEL:
    basedir = os.path.abspath('%s/../' % os.path.dirname(__file__))
    if os.path.isdir(os.path.join(basedir, 'moulinette')):
        sys.path.insert(0, basedir)
    LOG_DIR = os.path.join(basedir, 'log')


# Initialization & helpers functions -----------------------------------

def _die(message, title='Error:'):
    """Print error message and exit"""
    try:
        from moulinette.interfaces.cli import colorize
    except ImportError:
        colorize = lambda msg, c: msg
    print('%s %s' % (colorize(title, 'red'), message))
    sys.exit(1)

def _parse_cli_args():
    """Parse additional arguments for the cli"""
    import argparse

    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--no-cache',
        action='store_false', default=USE_CACHE, dest='use_cache',
        help="Don't use actions map cache",
    )
    parser.add_argument('--output-as',
        choices=['json', 'plain'], default=OUTPUT_AS,
        help="Output result in another format",
    )
    parser.add_argument('--debug',
        action='store_true', default=False,
        help="Log and print debug messages",
    )
    parser.add_argument('--verbose',
        action='store_true', default=False,
        help="Be more verbose in the output",
    )
    parser.add_argument('--quiet',
        action='store_true', default=False,
        help="Don't produce any output",
    )

    return (parser,) + parser.parse_known_args()

def _init_moulinette(debug=False, verbose=False, quiet=False):
    """Configure logging and initialize the moulinette"""
    from moulinette import init

    # Define loggers handlers
    global LOGGERS_HANDLERS
    if quiet and 'tty' in LOGGERS_HANDLERS:
        LOGGERS_HANDLERS.remove('tty')
    elif verbose and 'tty' not in LOGGERS_HANDLERS:
        LOGGERS_HANDLERS.append('tty')

    # Define loggers level
    global LOGGERS_LEVEL, TTY_LOG_LEVEL
    if verbose:
        TTY_LOG_LEVEL = 'INFO'
    if debug:
        LOGGERS_LEVEL = TTY_LOG_LEVEL = 'DEBUG'

    # Custom logging configuration
    logging = {
        'version': 1,
        'disable_existing_loggers': True,
        'formatters': {
            'precise': {
                'format': '%(asctime)-15s %(levelname)-8s %(name)s %(funcName)s - %(fmessage)s'
            },
        },
        'filters': {
            'action': {
                '()': 'moulinette.utils.log.ActionFilter',
            },
        },
        'handlers': {
            'tty': {
                'level': TTY_LOG_LEVEL,
                'class': 'moulinette.interfaces.cli.TTYHandler',
            },
            'file': {
                'class': 'logging.FileHandler',
                'formatter': 'precise',
                'filename': '%s/%s' % (LOG_DIR, LOG_FILE),
                'filters': ['action'],
            },
        },
        'loggers': {
            'moulinette': {
                'handlers': LOGGERS_HANDLERS,
                'level': LOGGERS_LEVEL,
            },
            'yunohost': {
                'handlers': LOGGERS_HANDLERS,
                'level': LOGGERS_LEVEL,
            },
        },
    }

    # Create log directory
    if not os.path.isdir(LOG_DIR):
        try:
            os.makedirs(LOG_DIR, 0750)
        except os.error as e:
            _die(str(e))

    # Initialize moulinette
    init(logging_config=logging, _from_source=IN_DEVEL)

def _retrieve_namespaces():
    """Return the list of namespaces to load"""
    from moulinette.actionsmap import ActionsMap
    ret = ['yunohost']
    for n in ActionsMap.get_namespaces():
        # Append YunoHost modules
        if n.startswith('ynh_'):
            ret.append(n)
    return ret


# Main action ----------------------------------------------------------

if __name__ == '__main__':
    parser, opts, args = _parse_cli_args()
    _init_moulinette(opts.debug, opts.verbose, opts.quiet)

    # Check that YunoHost is installed
    if not os.path.isfile('/etc/yunohost/installed') and \
       (len(args) < 2 or (args[0] +' '+ args[1] != 'tools postinstall' and \
                          args[0] +' '+ args[1] != 'backup restore')):
        from moulinette.interfaces.cli import get_locale

        # Init i18n
        m18n.load_namespace('yunohost')
        m18n.set_locale(get_locale())

        # Print error and exit
        _die(m18n.n('yunohost_not_installed'), m18n.g('error'))

    # Execute the action
    from moulinette import cli
    ret = cli(_retrieve_namespaces(), args,
              use_cache=opts.use_cache, output_as=opts.output_as,
              parser_kwargs={'top_parser': parser})
    sys.exit(ret)
